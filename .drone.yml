pipeline:

  build:
    image: quay.io/ukhomeofficedigital/drone-docker
    commands:
      - docker build -t cop-data-api:$${DRONE_COMMIT_SHA} .
    when:
      event: push

  unit_tests:
    image: quay.io/ukhomeofficedigital/drone-docker
    commands:
      - docker run -t cop-data-api:$${DRONE_COMMIT_SHA} sh -c "npm test"
    when:
      event: push

  image_to_quay:
    image: quay.io/ukhomeofficedigital/drone-docker
    secrets:
      - DOCKER_USERNAME
      - DOCKER_PASSWORD
    registry: quay.io
    repo: quay.io/ukhomeofficedigital/cop-data-api
    tags:
      - ${DRONE_BUILD_NUMBER}
      - ${DRONE_COMMIT_SHA}
      - latest
    when:
      branch: master
      event: push

  deploy_to_dev:
    image: quay.io/ukhomeofficedigital/kd
    secrets:
      - DEV_HOSTNAME
      - DEV_KUBE_NAMESPACE
      - DEV_KUBE_SERVER
      - DEV_KUBE_TOKEN
      - DEV_KEYCLOAK_URL
      - DEV_CLIENT_ID
      - DEV_LOG_LEVEL
      - DEV_DB_CONNECTION_STRING
      - DEV_SEARCH_SCHEMA
    commands:
      - export HOSTNAME=$${DEV_HOSTNAME}
      - export KUBE_NAMESPACE=$${DEV_KUBE_NAMESPACE}
      - export KUBE_SERVER=$${DEV_KUBE_SERVER}
      - export KUBE_TOKEN=$${DEV_KUBE_TOKEN}
      - export KEYCLOAK_URL=$${DEV_KEYCLOAK_URL}
      - export CLIENT_ID=$${DEV_CLIENT_ID}
      - export LOG_LEVEL=$${DEV_LOG_LEVEL}
      - export DB_CONNECTION_STRING=$${DEV_DB_CONNECTION_STRING}
      - export SEARCH_SCHEMA=$${DEV_SEARCH_SCHEMA}
      - kd --insecure-skip-tls-verify -f kube/deployment.yml -f kube/service.yml -f kube/ingress.yml -f kube/network-policy.yml
    when:
      branch: master
      event: push

  deploy_to_staging:
    image: quay.io/ukhomeofficedigital/kd
    secrets:
      - STAGING_HOSTNAME
      - STAGING_KUBE_NAMESPACE
      - STAGING_KUBE_SERVER
      - STAGING_KUBE_TOKEN
      - STAGING_KEYCLOAK_URL
      - STAGING_CLIENT_ID
      - STAGING_LOG_LEVEL
      - STAGING_DB_CONNECTION_STRING
      - STAGING_SEARCH_SCHEMA
    commands:
      - export HOSTNAME=$${STAGING_HOSTNAME}
      - export KUBE_NAMESPACE=$${STAGING_KUBE_NAMESPACE}
      - export KUBE_SERVER=$${STAGING_KUBE_SERVER}
      - export KUBE_TOKEN=$${STAGING_KUBE_TOKEN}
      - export KEYCLOAK_URL=$${STAGING_KEYCLOAK_URL}
      - export CLIENT_ID=$${STAGING_CLIENT_ID}
      - export LOG_LEVEL=$${STAGING_LOG_LEVEL}
      - export DB_CONNECTION_STRING=$${STAGING_DB_CONNECTION_STRING}
      - export SEARCH_SCHEMA=$${STAGING_SEARCH_SCHEMA}
      - kd --insecure-skip-tls-verify -f kube/deployment.yml -f kube/service.yml -f kube/ingress.yml -f kube/network-policy.yml
    when:
      event: deployment
      environment: staging
      branch: master

  deploy_to_production:
    image: quay.io/ukhomeofficedigital/kd
    secrets:
      - PRODUCTION_HOSTNAME
      - PRODUCTION_KUBE_NAMESPACE
      - PRODUCTION_KUBE_SERVER
      - PRODUCTION_KUBE_TOKEN
      - PRODUCTION_KEYCLOAK_URL
      - PRODUCTION_CLIENT_ID
      - PRODUCTION_LOG_LEVEL
      - PRODUCTION_DB_CONNECTION_STRING
      - PRODUCTION_SEARCH_SCHEMA
    commands:
      - export HOSTNAME=$${PRODUCTION_HOSTNAME}
      - export KUBE_NAMESPACE=$${PRODUCTION_KUBE_NAMESPACE}
      - export KUBE_SERVER=$${PRODUCTION_KUBE_SERVER}
      - export KUBE_TOKEN=$${PRODUCTION_KUBE_TOKEN}
      - export KEYCLOAK_URL=$${PRODUCTION_KEYCLOAK_URL}
      - export CLIENT_ID=$${PRODUCTION_CLIENT_ID}
      - export LOG_LEVEL=$${PRODUCTION_LOG_LEVEL}
      - export DB_CONNECTION_STRING=$${PRODUCTION_DB_CONNECTION_STRING}
      - export SEARCH_SCHEMA=$${PRODUCTION_SEARCH_SCHEMA}
      - kd --insecure-skip-tls-verify -f kube/deployment.yml -f kube/service.yml -f kube/ingress.yml -f kube/network-policy.yml
    when:
      event: deployment
      environment: production
      branch: master
